---
title: "class 13: RNASeq Analysis"
author: "Vidisha Marwaha (PID: A16677246)"
format: pdf
---

The data for this hands-on session comes from a published RNA-seq experiment where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects (Himes et al. 2014).

## Import Data

We need two things for this analysis: counts and metadata these are called "countData" and "colData" in the DESeq2 world.

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <- read.csv("airway_metadata.csv")
```

```{r}
head(counts)
```

```{r}
head(metadata)
```

## Examine Data

>Q1. How many genes are in this dataset? 

```{r}
nrow(counts)
```

>Q2. How many ‘control’ cell lines do we have?

```{r}
sum(metadata$dex == "control")
```

```{r}
table(metadata$dex)
```

### Check on the match of metadata with the counts data

```{r}
colnames(counts)
```

```{r}
metadata$id
```

```{r}
colnames(counts) == metadata$id
```

If you want to know all the elements of a vector are TRUE we can use the `all()` function.

```{r}
all(c(T,T,T, F))
```

```{r}
all(colnames(counts) == metadata$id)
```

## Analysis

I want to start by comparing "control" and "treated" columns. To this I will first find the average for each gene (row) in all "control" columns. Then I will find the average in the "treated" columns. Then I will compare them.

Lets extract the "control" columns first

```{r}
control.inds <- metadata$dex == "control"
```

```{r}
control.counts <- counts[,control.inds]
```

Now find the mean value per gene using the `apply()` function.

```{r}
control.mean <- apply(control.counts, 1, mean)
```

Now do the same for the "treated" columns ie find the `treated.mean` values

```{r}
treated.mean <- apply(counts[,metadata$dex == "treated"], 1, mean)
```

Put these two vectors together for ease of book-keeping

```{r}
meancounts <- data.frame(control.mean, treated.mean)
head(meancounts)
```

Lets have a wee look with a quick plot

```{r}
plot(meancounts)
```

```{r}
plot(meancounts, log="xy")
```

```{r}
log(10, base=2)
```

```{r}
log2(10/10)
```

```{r}
log2(20/10)
```

```{r}
log2(10/20)
```

```{r}
log2(40/10)
```

We most often work in log2 units because they have a more simple interpretation.

Here we calculate the log2 fold change of treated/control values add it to our wee data frame of results.


```{r}
meancounts$log2fc <- log2(meancounts$treated.mean/meancounts$control.mean)

head(meancounts)
```

There are some funky answers in there like NaN (Not a Number) and -Inf (minus infinity) that all come because I have zero count genes in my dataset.

It is common practice to filter these zero count genes out before we go too deep.

```{r}
to.keep.inds <- (rowSums(meancounts[,1:2] == 0) ==0)

mycounts <- meancounts[to.keep.inds,]
head(mycounts)
```

> Q. How many genes do we have left after zero count genes filtering?

```{r}
nrow(mycounts)
```

A common threshold for calling a gene "up" or "down" is a log2 fold change of +2 or -2.

>Q. How many "up" regulated genes do we have?

```{r}
sum(mycounts$log2fc >= +2)
```

>Q. How many "down" regulated genes do we have?

```{r}
sum(mycounts$log2fc <= -2)
```

## DESeq2 Analysis

We need to do this analysis properly with our inner stats person kept happy.

```{r}
#| message: false
library(DESeq2)
```

To use DESeq we need to get our input data in very particular format.

```{r}
dds <- DESeqDataSetFromMatrix(countData=counts, 
                        colData=metadata, 
                       design=~dex)
```

Run DESeq analysis

```{r}
dds <- DESeq(dds)
```

Get the results

```{r}
res <- results(dds)
head(res)
```

I want to make a figure showing an overview of all my results to date. A plot of **log2 fold change** vs the **p-value** (adjusted p-value)

```{r}
plot(res$log2FoldChange, -log(res$padj))
abline(v=-2, col="gray")
abline(v=+2, col="gray")
abline(h=-log(0.05), col="gray")
```

## Add annotation data

We want to add on gene symbols (ie. gene names) as well as other common identifiers from major databases for all our genes of interest.

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)
```

My IDs are in the `rownames(res)` and they are from ENSEMBL

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="SYMBOL",          # The new format we want to add
                     multiVals="first")

head(res)
```

We also want "GENENAME" and "ENTREZID"

```{r}
res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="GENENAME",          # The new format we want to add
                     multiVals="first")

res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="ENTREZID",
                     keytype="ENSEMBL",
                     multiVals="first")


head(res)
```

```{r}
write.csv(res, file="deseq_results.csv")
```

## Pathway Analysis

Here we will use the "gage" package to do some pathway analysis (geneset enrichement)

```{r}
#|Message: False
library(pathview)
library(gage)
library(gageData)
```

Now we look at the Kegg data
```{r}
data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

To run gage we need to provide it with a vector of fold change values (not our big full results data table)

```{r}
foldchanges = res$log2FoldChange
foldchanges
```

Add the ENTREZ ids as names to this vector

```{r}
x <- c(chandra=10, alice=9, barry =7)
```

```{r}
names(x)
```

```{r}
names(foldchanges) <- res$entrez
head(foldchanges)
```

Now run **gage** with this input and the kegg pathways

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
attributes(keggres)
```

```{r}
# Look at the first three down (less) pathways
head(keggres$less, 3)
```

Lets have a look at the image of the pathway

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

![](hsa05310.pathview.png)


