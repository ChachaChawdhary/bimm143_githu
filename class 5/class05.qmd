---
title: "Class : Data visualization with ggplot"
author: "Vidisha Marwaha (A16677246)"
format: pdf
toc: TRUE
---

## Introduction

Today we will have our first play with the **ggplot2** 
package - one of the most popular graphics packages on 
the planet.

There are many plotting systems in R. These include
so-called *"base"* plotting/graphics.

```{r}
plot(cars)
```

base plot is generally rather short code and somewhat
dull plots - but it is always there for you and is
fast for big datasets.

## Installing ggplot2

If I want to use **ggplot2** it takes some more work

```{r}
#ggplot(cars)
```

I need to install the package first to my computer. To do
this I can use the function `install.packages("ggplot2")`

```{r}
#install.packages("ggplot2") 
```

Every time I want to use a package I need to load it up with
a `library()` call.

```{r}
library(ggplot2)
```

Now finally I can use ggplot
```{r}
ggplot(cars)
```

Every ggplot has atleast 3 things:

- **data** (the data from with the data you want to plot)
- **aes** (the aesthetic mapping of the data to plot)
- **geom** (how do you want the plot to look, points, lines, etc)

```{r}
head(cars)
```
```{r}
ggplot(cars) + 
  aes(x=speed, y=dist) +
  geom_point()
```

```{r}
ggplot(cars) + 
  aes(x=speed, y=dist) +
  geom_line()
```

Now we smooth the lines using multiple geom inputs...

```{r}
ggplot(cars) + 
  aes(x=speed, y=dist) +
  geom_point() +
  geom_smooth()
```

I want a linear model and no standard bounds shown on my plot. I also
want nicer axis labels, a title, etc.

```{r}
bp <- ggplot(cars) +
  aes(x=speed, y=dist) +
  geom_point()
```

```{r}
bp + geom_smooth(se=FALSE, method="lm") +
  labs(title="Stopping Distance of Old Cars", 
       x="Speed (MPH)", 
       y="Distance (ft)",
       caption="From the cars dataset") +
  theme_classic()
```

## A more complicated scatter plot

Here we make a plot of gene expression data:

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
```

```{r}
head(genes)
```


```{r}
table(genes$State)
```

```{r}
#genes$State == "up"
```

```{r}
round(sum(genes$State == "up") / nrow(genes) * 100 , 2)
```

```{r}
n.gene <- nrow(genes)
n.up <- sum(genes$State == "up")

up.precent <- n.up/n.gene * 100
round(up.precent, 2)
```

```{r}
myplot <- ggplot(genes) +
  aes(x=Condition1, y=Condition2, col=State) +
  geom_point()

```

Change the colors

```{r}
myplot + scale_colour_manual( values=c("purple","yellow","green") )
```

Change the titles

```{r}
myplot + labs(title="Gene expression changes on Drug Treatment",
             x="Control (no drug) ",
         y="Drug Treatment")
```

## Exploring the gapminder dataset

Here we will load up the gapminder data set to get practice with plots.

```{r}
# File location online
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)
```

Q. How many entries rows are in this dataset?

```{r}
nrow(gapminder)
```

Q. How many columns?

```{r}
ncol(gapminder)
```

```{r}
head(gapminder)
```

```{r}
table(gapminder$year)
```

Q. How many continents?

```{r}
table(gapminder$continent)
```

I could use the `unique()` function...

```{r}
length(unique(gapminder$continent))
```

Q. How many countries are there?

```{r}
length(unique(gapminder$country))
```

Now we make a plot of gdp per capita on x axis and life expectancy on y axis

```{r}
ggplot(gapminder) +
  aes(x=gdpPercap, y=lifeExp) +
  geom_point()
```

```{r}
ggplot(gapminder) +
  aes(x=gdpPercap, y=lifeExp) +
  geom_point(alpha=0.5)
```
```{r}
ggplot(gapminder) +
  aes(x=gdpPercap, y=lifeExp) +
  geom_point(col="green")
```


```{r}
#install.packages("dplyr")
library(dplyr)

gapminder_2007 <- gapminder %>% filter(year==2007)
head(gapminder_2007)
```


Plot of 2007 with population and continent date
```{r}
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp, color=continent, size=pop) +
  geom_point(alpha=0.5)
```

## Using Facet Wrap

```{r}
ggplot(gapminder) +
  aes(x=gdpPercap, y=lifeExp) +
  geom_point() +
  facet_wrap(~continent)
```

